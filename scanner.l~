%{
/* COMPONENTES:
	Clemilson Dias
	Arthur Foscarini
	Rafael Galuschka
*/

#include <stdlib.h>
#include "main.h"
#include "parser.h"

comp_dict_t *dicionario;
comp_dict_item_t *itemDic;


int getLineNumber(void);
int LineNumber = 1;


%}

DIGIT 		[0-9]
ID 		[a-zA-Z_]([a-zA-Z_]|{DIGIT})*
LIT_INT 	{DIGIT}+
LIT_FLOAT 	{LIT_INT}"."{DIGIT}+
LIT_FALSE 	false
LIT_TRUE 	true
LIT_CHAR 	'(\\.|[^\\'])+\'
LIT_STRING 	\"(\\.|[^\\"])*\"

%x comentario
%x comentario1

%%
"/*"         BEGIN(comentario);

<comentario>[^*\n]*        /* consome qualquer coisa que não seja '*' */
<comentario>"*"+[^*/\n]*   /* consome todos os '*' que não são seguidos de '/' */
<comentario>\n             ++LineNumber;++yylineno;
<comentario>"*"+"/"        BEGIN(INITIAL);

"//"         BEGIN(comentario1);

<comentario1>[^\n]*        /* consome qualquer coisa que não seja '/' */
<comentario1>\n             ++LineNumber;++yylineno;BEGIN(INITIAL);

[ \t\r]		/* espaços */

int 		{ /* printf("reservada int\n"); */ return TK_PR_INT; }
float 		{ /* printf("reservada float\n"); */ return TK_PR_FLOAT; }
bool 		{ return TK_PR_BOOL; }
char 		{ /* printf("reservada char\n");*/ return TK_PR_CHAR; }
string 		{ /* printf("reservada string\n"); */ return TK_PR_STRING; }
if 		{ /* printf("IF\n"); */ return TK_PR_IF; }
then 		{ /* printf("then \n");*/ return TK_PR_THEN; }
else 		{ /* printf("else \n"); */ return TK_PR_ELSE; }
while 		{ /* printf("while \n"); */ return TK_PR_WHILE; }
do 		{ return TK_PR_DO; }
input 		{ return TK_PR_INPUT; }
output 		{ /* printf("output\n"); */ return TK_PR_OUTPUT; }
return 		{ return TK_PR_RETURN; }

[,:\(\)+*/<>!&$] { return yytext[0]; }
[\}] { return yytext[0]; }
[\{] { return yytext[0]; }
[\]] { return yytext[0]; }
[\[] { return yytext[0]; }
[;] {printf("oiaeuaki\n"); return yytext[0]; }
[-] { return yytext[0]; }
[=] { return yytext[0]; }

"<=" 		{ return TK_OC_LE; }
">=" 		{ return TK_OC_GE; }
"==" 		{ return TK_OC_EQ; }
"!=" 		{ return TK_OC_NE; }
"&&" 		{ return TK_OC_AND; }
"||" 		{ return TK_OC_OR; }
"\n"		{++LineNumber;++yylineno;}

{LIT_STRING} 	{
			printf("string. o texto é:%s\n",yytext);					
			if (!dicionarioExiste(dicionario))
				initDicionario();
                        if(dicionarioProcuraChave(dicionario,yytext) == 0)
			{
				itemDic = dicionarioCriaItem(yytext,yylineno,TK_LIT_STRING,IKS_SIMBOLO_STRING);
				yylval.symbol = itemDic;
				dicionarioInsereItem(dicionario,itemDic);
				return TK_LIT_STRING;
			} else 
			{
				yylval.symbol = dicionarioRetornaChave(dicionario,yytext);
				dicionarioAtualizaLinha(dicionario,yytext,yylineno);
				return TK_LIT_STRING; 
			}
		}


{LIT_INT} 	{ 
			printf("literal int. o texto é:%s\n",yytext);
			if (!dicionarioExiste(dicionario))
				initDicionario();
			if(dicionarioProcuraChave(dicionario,yytext) == 0)
			{
				itemDic = dicionarioCriaItem(yytext,yylineno,TK_LIT_INT,IKS_SIMBOLO_INT);
				yylval.symbol = itemDic;
				dicionarioInsereItem(dicionario,itemDic);
				return TK_LIT_INT;
			} else 
			{
				yylval.symbol = dicionarioRetornaChave(dicionario,yytext);
				dicionarioAtualizaLinha(dicionario,yytext,yylineno);
				return TK_LIT_INT; 
			}
		}
			
{LIT_FLOAT} 	{
			printf("lit float. o texto é:%s\n",yytext);				
			if (!dicionarioExiste(dicionario))
				initDicionario();
			if(dicionarioProcuraChave(dicionario,yytext) == 0)
			{
				itemDic = dicionarioCriaItem(yytext,yylineno,TK_LIT_FLOAT,IKS_SIMBOLO_FLOAT);
				yylval.symbol = itemDic;
				dicionarioInsereItem(dicionario,itemDic);
				return TK_LIT_FLOAT;
			} else 
			{
				yylval.symbol = dicionarioRetornaChave(dicionario,yytext);
				dicionarioAtualizaLinha(dicionario,yytext,yylineno);
				return TK_LIT_FLOAT; 
			}
		}
			
{LIT_FALSE} 	{ 
			printf("lit false. o texto é:%s\n",yytext);				
			if (!dicionarioExiste(dicionario))
				initDicionario();
			if(dicionarioProcuraChave(dicionario,yytext) == 0)
			{
				itemDic = dicionarioCriaItem(yytext,yylineno,TK_LIT_FALSE,IKS_SIMBOLO_BOOL);
				yylval.symbol = itemDic;
				dicionarioInsereItem(dicionario,itemDic);
				return TK_LIT_FALSE;
			} else 
			{
				yylval.symbol = dicionarioRetornaChave(dicionario,yytext);
				dicionarioAtualizaLinha(dicionario,yytext,yylineno);				
				return TK_LIT_FALSE; 
			}
		}
			
{LIT_TRUE} 	{ 
			printf("lit true. o texto é:%s\n",yytext);				
			if (!dicionarioExiste(dicionario))
				initDicionario();
			if(dicionarioProcuraChave(dicionario,yytext) == 0)
			{
				itemDic = dicionarioCriaItem(yytext,yylineno,TK_LIT_TRUE,IKS_SIMBOLO_BOOL);
				yylval.symbol = itemDic;
				dicionarioInsereItem(dicionario,itemDic);
				return TK_LIT_TRUE;
			} else 
			{
				yylval.symbol = dicionarioRetornaChave(dicionario,yytext);
				dicionarioAtualizaLinha(dicionario,yytext,yylineno);				
				return TK_LIT_TRUE; 
			}
		}
			
{LIT_CHAR} 	{ 
			printf("lit char. o texto é:%s\n",yytext);				
			if (!dicionarioExiste(dicionario))
				initDicionario();
			if(dicionarioProcuraChave(dicionario,yytext) == 0)
			{
				itemDic = dicionarioCriaItem(yytext,yylineno,TK_LIT_CHAR,IKS_SIMBOLO_CHAR);
				yylval.symbol = itemDic;
				dicionarioInsereItem(dicionario,itemDic);
				return TK_LIT_CHAR;
			} else 
			{
				yylval.symbol = dicionarioRetornaChave(dicionario,yytext);
				dicionarioAtualizaLinha(dicionario,yytext,yylineno);				
				return TK_LIT_CHAR; 
			}
		}
			
{ID} 		{
			printf("ID. o texto é:%s\n",yytext);
			if (!dicionarioExiste(dicionario))
				initDicionario();
			if(dicionarioProcuraChave(dicionario,yytext) == 0)
			{
//				printf("Criado item no dicionario:%s\n",yytext);
				itemDic = dicionarioCriaItem(yytext,yylineno,TK_IDENTIFICADOR,IKS_SIMBOLO_IDENTIFICADOR);
				yylval.symbol = itemDic;
				dicionarioInsereItem(dicionario,itemDic);
				
				//printf("----------\n\n");
				//dicionarioImprime(dicionario);
				//printf("\n\n----------\n\n");
				
				return TK_IDENTIFICADOR;
			} else 
			{
				yylval.symbol = dicionarioRetornaChave(dicionario,yytext);
				dicionarioAtualizaLinha(dicionario,yytext,yylineno);
                                return TK_IDENTIFICADOR;
			}
		}


. { printf("Erro\n"); return TOKEN_ERRO; }
%%

int getLineNumber(void)
{
	return yylineno;
}

//void initDicionario(void);
void initDicionario(void)
{
   int token = 0;
   dicionario = dicionarioCria(token);
}
